name: Build, Commit, Tag & Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'tests/**'

permissions:
  contents: write
  packages: write

jobs:
  build-test-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Run lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

      - name: Verify dist/
        run: |
          if [ "$(git diff --ignore-space-at-eol dist/ | wc -l)" -gt "0" ]; then
            echo "Changes detected in dist/. Committing..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add dist/
            git commit -m "chore: update distribution files [skip ci]"
            git push
          fi

      - name: Tag and release
        env:
          GH_TOKEN: ${{ secrets.GH_GITHUB_TOKEN }}
        run: |
          git fetch --tags

          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || true)
          current_version=$(node -p "require('./package.json').version")

          if [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"

            if (( patch < 99 )); then
              patch=$((patch + 1))
            else
              patch=0
              if (( minor < 99 )); then
                minor=$((minor + 1))
              else
                minor=0
                major=$((major + 1))
              fi
            fi
          else
            # If no tags exist, use current version from package.json
            if [[ "$current_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
            else
              major=1
              minor=0
              patch=0
            fi
          fi

          new_tag="v${major}.${minor}.${patch}"
          echo "New tag: $new_tag"

          # Only update package.json if version is different
          if [ "$new_tag" != "v$current_version" ]; then
            npm version "${major}.${minor}.${patch}" --no-git-tag-version
          fi

          # Generate changelog
          if [ -n "$latest_tag" ]; then
            git log "$latest_tag"..HEAD --pretty=format:"- %s" > changelog.txt
          else
            git log --pretty=format:"- %s" > changelog.txt
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit package.json changes if any
          if [ "$(git diff --name-only package.json package-lock.json)" != "" ]; then
            git add package.json package-lock.json
            git commit -m "chore: bump version to ${major}.${minor}.${patch} [skip ci]"
            git push
          fi

          git tag "$new_tag"
          git push origin "$new_tag"

          git tag -f "v$major" "$new_tag"
          git push -f origin "v$major"

          # Create GitHub release with assets
          gh release create "$new_tag" \
            --title "$new_tag" \
            --notes-file changelog.txt \
            dist/index.js

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.GH_CODECOV_TOKEN }}
        with:
          fail_ci_if_error: true
          flags: unittests
          verbose: true
